{"version":3,"sources":["logo.svg","questions.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Questions","props","console","log","answers","radio","i","length","push","className","key","type","name","class","question","sampleData","App","state","questions","currentScreen","fetch","then","response","json","data","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,wICE5B,SAASC,EAAUC,GAChCC,QAAQC,IAAIF,EAAMG,QAAQ,IAG1B,IAFA,IAAIC,EAAQ,GAEHC,EAAE,EAAGA,EAAIL,EAAMG,QAAQG,OAAQD,IAEtCD,EAAMG,KACJ,yBAAKC,UAAU,QAAQC,IAAKJ,GAC1B,2BAAOK,KAAK,QAAQC,KAAK,YACzB,+BAAQX,EAAMG,QAAQE,MAM5B,OADAJ,QAAQC,IAAIE,GAEV,yBAAKI,UAAU,YACb,yBAAKI,MAAM,iBAAiBZ,EAAMa,UAClC,8BACGT,ICdT,IAAIU,EAAa,CACfD,SAAW,2DACXV,QAAU,CAAC,UAAW,YAAa,aA2CtBY,E,kDAvCb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXC,UAAY,GAEZC,cAAgB,IALD,E,gEAUjBC,MAAM,cACHC,MAAK,SAACC,GACLA,EAASC,OAAOF,MAAK,SAASG,GAC5BtB,QAAQC,IAAIqB,W,+BAWlB,OACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,SACb,8CACA,kEACA,8CACA,kBAACT,EAAD,CAAWc,SAAUC,EAAWD,SAAUV,QAASW,EAAWX,gB,GA/BtDqB,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.c1571dcc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport default function Questions(props) {\n  console.log(props.answers[1])\n  var radio = []\n\n  for (var i=0; i < props.answers.length; i++) {\n\n    radio.push(\n      <div className=\"radio\" key={i}>\n        <input type=\"radio\" name=\"contact\"></input>\n        <label>{props.answers[i]}</label>\n      </div>\n    )\n  }\n\n  console.log(radio)\n  return (\n    <div className=\"question\">\n      <div class=\"questionTitle\">{props.question}</div>\n      <form>\n        {radio}\n      </form>\n    </div>\n\n\n  )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//this.setState({questions:response})\n\nimport Questions from './questions'\n\nvar sampleData = {\n  question : \"What other language does Nathan know other than English?\",\n  answers : ['Spanish', 'Pig Latin', 'Mandarin']\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions : [],\n\n      currentScreen : ''\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"/questions\")\n      .then((response) => {\n        response.json().then(function(data) {\n          console.log(data)\n        })\n      })\n      /*\n      .catch((error) => {\n        alert(\"Couldn't fetch data\")\n      })\n      */\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"intro\">\n          <h1>Welcome Udemy!</h1>\n          <h2>Here's a quiz about me, Nathan Lee</h2>\n          <button>Begin Quiz</button>\n          <Questions question={sampleData.question} answers={sampleData.answers}/>\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}