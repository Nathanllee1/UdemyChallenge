{"version":3,"sources":["question.jsx","results.jsx","App.js","serviceWorker.js","index.js"],"names":["Question","props","onChange","e","setState","buttonToggle","state","formValue","button","this","questionNumber","lastQuestion","className","href","toString","type","value","disabled","allEntered","id","key","question","answers","map","answer","index","name","React","Component","Results","correctCount","i","answerObject","length","questions","answerNum","App","onQuestionSubmit","currentScreen","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","error","console","log","onQuestionChange","undef","currentQuestions","target","questionCount","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d3c50a53.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonToggle : true,\n      formValue: '',\n    };\n  };\n\n  onChange = (e) => {\n    this.setState({buttonToggle : false})\n  };\n\n  render() {\n    var button;\n\n    if (this.props.questionNumber < this.props.lastQuestion - 1) {\n      button = <a className={this.state.buttonToggle ? 'btn btn-primary disabled' : 'btn btn-primary'} href={'#q' + (this.props.questionNumber + 1).toString()}>Next</a>\n    } else {\n\n      button = <input className=\"btn btn-primary\" type=\"submit\" value={'Submit Quiz'} disabled={!this.props.allEntered}/>\n    };\n\n    return (\n      <div className=\"question\" id={'q' + this.props.questionNumber.toString()} key={this.props.questionNumber}>\n        <div className=\"questionBox\">\n          <h1 className=\"questionTitle\">{this.props.question.question}</h1>\n            {this.props.question.answers.map((answer, index) =>\n              <div className=\"radio\" key={index}>\n                <label>\n                  <input type=\"radio\" value={index} name={this.props.questionNumber} onChange={this.onChange}></input>\n                  {answer}\n                </label>\n              </div>\n            )}\n            {button}\n        </div>\n      </div>\n    );\n  };\n};\n","import React from 'react';\n\nexport default function Results(props) {\n  var correctCount = 0;\n\n  for (var i=0; i < props.answerObject.length; i++) {\n    if (props.answerObject[i][0] === props.answerObject[i][1]) {\n      correctCount += 1;\n    };\n  };\n\n  return (\n    <div className=\"results\">\n      <div className=\"resultsBox\">\n        <h1>You got {correctCount} out of {props.questions.length} questions right</h1><br/>\n\n          {props.answerObject.map((answerNum, index) => (\n            <div className='answerBox' key={index}>\n              <h3><b>Question {index}</b>: {props.questions[index].question}</h3>\n              {(props.questions[index].answers[answerNum[1]] !== props.questions[index].answers[answerNum[0]]) ?\n                <div className=\"incorrectAnswer\">\n                  <h4>{props.questions[index].answers[answerNum[1]]}  <i className=\"fas fa-times\"></i></h4>\n                  <h4>Correct Answer: {props.questions[index].answers[answerNum[0]]}</h4>\n                </div>\n                :\n                <div className=\"correctAnswer\">\n                  <h4>{props.questions[index].answers[answerNum[0]]}  <i className=\"fas fa-check\"></i></h4>\n                </div>\n              }\n              <br />\n            </div>\n          ))}\n        <a type=\"button\" className=\"btn btn-primary\" href=\"/\">Take Quiz Again</a>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\n\nimport Question from './question';\nimport Results from './results';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions : [],\n      questionCount: 0,\n      currentScreen : 'Questions',\n      answers: [],\n      answerObject: [],\n      allEntered: false\n    };\n  };\n\n  componentDidMount() {\n    fetch(\"/questions\")\n      .then((response) => {\n        return response.json()\n      })\n      .then(data => this.setState({questions : data}))\n      .catch((error) => {\n        console.log(\"Couldn't fetch data\")\n      });\n  };\n\n  onQuestionSubmit = () => {\n    this.setState({currentScreen : 'Results'});\n    fetch('/answers', {\n      method: 'POST', // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state.answers),\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((data) => {\n      this.setState({answerObject : data});\n    })\n    .catch((error) => {\n      console.log('Could not submit data');\n    });\n  };\n\n  onQuestionChange = (e) => {\n    var currentQuestions = this.state.answers;\n\n    currentQuestions[[e.target.name]] = e.target.value;\n\n    this.setState({ answers : currentQuestions });\n\n    var undef;\n\n    if (this.state.answer.length === this.state.questions.length) {\n      for (var i=0; i<this.state.answer.length; i++) {\n        if (this.state.answer[i] === 'undefined') {\n          undef = true\n        }\n      }\n    }\n\n    if (undef != true) {\n      this.setState({allEntered : true})\n    }\n\n\n  };\n\n  render() {\n    if (this.state.currentScreen === 'Questions') {\n      return (\n        <div className=\"content\">\n          <div className=\"intro\">\n            <div className=\"introBox\">\n              <h1>Welcome Udemy!</h1>\n              <h2>Here's a quiz about me, <b>Nathan Lee</b> </h2>\n              <p>(Hint: my resume might help)</p><br/>\n              <h3>My response to the <a href=\"https://github.com/udemy/coding-challenge\">Udemy Web App Coding Challenge</a></h3>\n              <h4>The <a href=\"https://github.com/Nathanllee1/UdemyChallenge\">code and writeup</a></h4> <br/>\n              <a type=\"button\" className=\"btn btn-primary\" href=\"#q0\">Begin Quiz</a>\n            </div>\n          </div>\n          <form onSubmit={this.onQuestionSubmit} onChange={this.onQuestionChange}>\n            {this.state.questions.map((question, index) => (\n              <Question key={index} question={question} questionNumber={index} onSubmit={this.onQuestionSubmit} lastQuestion={this.state.questions.length} allEntered={this.state.allEntered}/>\n            ))}\n          </form>\n        </div>\n      );\n    } else if (this.state.currentScreen === 'Results') {\n      return (\n        <Results answerObject={this.state.answerObject} questions={this.state.questions}/>\n      );\n    };\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}